{"remainingRequest":"/home/runner/work/OIT-LEGO-RED/OIT-LEGO-RED/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/OIT-LEGO-RED/OIT-LEGO-RED/src/views/Tema1.vue?vue&type=template&id=00805505&lang=pug","dependencies":[{"path":"/home/runner/work/OIT-LEGO-RED/OIT-LEGO-RED/src/views/Tema1.vue","mtime":1734047474080},{"path":"/home/runner/work/OIT-LEGO-RED/OIT-LEGO-RED/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/OIT-LEGO-RED/OIT-LEGO-RED/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/OIT-LEGO-RED/OIT-LEGO-RED/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/OIT-LEGO-RED/OIT-LEGO-RED/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/OIT-LEGO-RED/OIT-LEGO-RED/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/OIT-LEGO-RED/OIT-LEGO-RED/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/OIT-LEGO-RED/OIT-LEGO-RED/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}